<!DOCTYPE html>
<html>
<head>
  <title>Карта Казани — Некомплект по лифтам (Яндекс)</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    html, body, #map {
      width: 100%; height: 100%; margin: 0; padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .sidebar {
      position: absolute; top: 10px; left: 10px;
      background: rgba(255, 255, 255, 0.95); padding: 15px;
      z-index: 1000; box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      border-radius: 12px; min-width: 260px; max-height: 90%; overflow-y: auto;
      border: 1px solid #ddd;
    }
    .sidebar h3 {
      margin-top: 0; font-size: 1.2em; border-bottom: 1px solid #ccc; padding-bottom: 5px;
    }
    .checkbox-group {
      margin-top: 10px;
    }
    .checkbox-group label {
      display: flex; align-items: center; margin: 4px 0;
      font-size: 14px; cursor: pointer;
    }
    .checkbox-group input[type="checkbox"] {
      margin-right: 8px;
    }
    .checkbox-group label:hover {
      background-color: #f0f0f0; border-radius: 5px;
    }
    .filter-controls {
      display: flex; gap: 5px; margin-top: 5px; flex-wrap: wrap;
    }
    .filter-controls button {
      font-size: 12px; padding: 3px 6px; cursor: pointer;
    }
  </style>
  <script src="https://api-maps.yandex.ru/2.1/?apikey=a493d8d9-6875-4c13-91d6-08e7703b879f&lang=ru_RU" type="text/javascript"></script>
</head>
<body>
  <div class="sidebar">
    <h3>Контроль отображения</h3>
    <div class="filter-controls">
      <button onclick="toggleAll(true)">Выбрать все</button>
      <button onclick="toggleAll(false)">Убрать все</button>
    </div>
    <div id="legend"></div>
  </div>
  <div id="map"></div>
  <script>
    const SHEET_ID = '1iMyG1z0ramdCKAX-5V-0CwWlZiFrqzwP4ujVSG8EN6k';
    const API_KEY = 'AIzaSyCAfEIQCxvq4vWZUfjKJ9ylQzGfg7Z0LAk';
    const RANGE = 'не комплект!A1:Z2000';

    let allData = [], map;
    const allPlacemarks = [];
    const iconColors = {};

    function generateColor(type) {
      let hash = 0;
      for (let i = 0; i < type.length; i++) hash = type.charCodeAt(i) + ((hash << 5) - hash);
      const c = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      return '#' + '00000'.substring(0, 6 - c.length) + c;
    }

    function toggleAll(state) {
      allPlacemarks.forEach(obj => {
        if (state) map.geoObjects.add(obj.placemark);
        else map.geoObjects.remove(obj.placemark);
      });
    }

    async function fetchGoogleSheet(callback) {
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`;
      const response = await fetch(url);
      const json = await response.json();
      const [headers, ...rows] = json.values;
      let lastAddress = '', lastOrder = '', lastContainer = '';
      const data = rows.map(row => {
        const obj = {};
        headers.forEach((header, i) => {
          obj[header.trim()] = row[i] ? row[i].trim() : "";
        });
        if (!obj["Адрес"]) obj["Адрес"] = lastAddress;
        if (!obj["№ заказа"]) obj["№ заказа"] = lastOrder;
        if (!obj["Тарное место"]) obj["Тарное место"] = lastContainer;
        lastAddress = obj["Адрес"];
        lastOrder = obj["№ заказа"];
        lastContainer = obj["Тарное место"];
        return obj;
      });
      callback(data);
    }

    function createPlacemark(coords, group, address) {
      let content = `<b>${address}</b><br>`;
      const byOrder = {};
      group.forEach(entry => {
        if (!byOrder[entry.order]) byOrder[entry.order] = { details: [], delivered: entry.delivered };
        byOrder[entry.order].details.push(entry);
      });

      for (const order in byOrder) {
        const orderDetails = byOrder[order].details;
        const totalQty = orderDetails.reduce((sum, el) => sum + parseInt(el.qty || '0'), 0);
        content += `<hr><b>Лифт ${order}</b> — <i>${totalQty} шт</i>`;
        const delivered = byOrder[order].delivered;
        if (delivered) content += `<div><i>Досыл: ${delivered}</i></div>`;
        content += '<ul>';
        orderDetails.forEach(el => {
          content += `<li><b>${el.type}</b>: ${el.item} — ${el.qty} шт. (ТМ: ${el.container})</li>`;
        });
        content += '</ul>';
      }

      return new ymaps.Placemark(coords, {
        balloonContent: content
      }, {
        iconColor: iconColors[group[0].type] || 'red',
        preset: 'islands#circleIcon'
      });
    }

    ymaps.ready(() => {
      map = new ymaps.Map("map", {
        center: [55.7904, 49.1346], zoom: 12, controls: ['zoomControl']
      });

      fetchGoogleSheet(function(data) {
        allData = data;
        const addressGroups = {};

        data.forEach(row => {
          const address = row["Адрес"]?.trim();
          const order = row["№ заказа"]?.trim();
          const container = row["Тарное место"]?.trim();
          const item = row["Наименование"] || "";
          const qty = row["Кол-во"] || "";
          const type = row["Тип детали"] || "";
          const delivered = row["Дата досыла"] || "";
          const lat = row["lat"] || row["LAT"];
          const lng = row["lng"] || row["LNG"];

          if (!address || !order || !lat || !lng) return;

          const coordKey = `${lat},${lng}`;
          if (!addressGroups[coordKey]) addressGroups[coordKey] = { coords: [parseFloat(lat), parseFloat(lng)], items: [] };
          addressGroups[coordKey].items.push({ address, order, container, type, item, qty, delivered });
        });

        for (const key in addressGroups) {
          const group = addressGroups[key];
          const color = generateColor(group.items[0].type);
          iconColors[group.items[0].type] = color;
          const placemark = createPlacemark(group.coords, group.items, group.items[0].address);
          map.geoObjects.add(placemark);
          allPlacemarks.push({ placemark });
        }
      });
    });
  </script>
</body>
</html>
